function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("cam#camera", "acquire_camera_focus")
	self.vel = vmath.vector3()
	self.align = 0
	self.speed = 1
	self.xmove = vmath.vector3(self.speed, 0, 0)
	self.ymove = vmath.vector3(0, self.speed, 0)
	self.coll_x = 0
	self.coll_y = 0
	self.wk = 0
	self.stpd = true
	self.hold = false

	timer.delay(1, false, function(self, handle, time_elapsed)
		msg.post("textbox", "text_write", {text = "しかし　いなかった！\nWelcome to Defold."})
	end)
end

local function animate(self, walk)
	if walk then
		if self.vel.y == 1 then
			self.align = 0
		end
		if self.vel.x == 1 then
			self.align = 1
		end
		if self.vel.y == -1 then
			self.align = 2
		end
		if self.vel.x == -1 then
			self.align = 3
		end
		if self.foot then
			sprite.play_flipbook("#sprite", hash("walk_L" .. self.align))
			self.foot = false
		else
			sprite.play_flipbook("#sprite", hash("walk_R" .. self.align))
			self.foot = true
		end
	else
		sprite.play_flipbook("#sprite", hash("idle_" .. self.align))
	end
end

local function move(self)
	local keyed = vmath.length(self.vel) > 0
	local lim = 16 / self.speed
	if self.wk < lim and keyed then
		self.coll = vmath.vector3(self.coll_x, self.coll_y, 0)
		if self.vel.y == 1 then
			if self.coll_y >= -0.5 then
				if self.stpd then
					animate(self, true)
				end
				go.set_position(self.pos + self.ymove)
				self.wk = self.wk + 1
				self.coll_x = 0
				self.coll_y = 0
			else
				animate(self, false)
			end
		elseif self.vel.x == 1 then
			if self.coll_x >= -0.5 then
				if self.stpd then
					animate(self, true)
				end
				go.set_position(self.pos + self.xmove)
				self.wk = self.wk + 1
				self.coll_x = 0
				self.coll_y = 0
			else
				animate(self, false)
			end
		elseif self.vel.y == -1 then
			if self.coll_y <= 0.5 then
				if self.stpd then
					animate(self, true)
				end
				go.set_position(self.pos - self.ymove)
				self.wk = self.wk + 1
				self.coll_x = 0
				self.coll_y = 0
			else
				animate(self, false)
			end
		elseif self.vel.x == -1 then
			if self.coll_x <= 0.5 then
				if self.stpd then
					animate(self, true)
				end
				go.set_position(self.pos - self.xmove)
				self.wk = self.wk + 1
				self.coll_x = 0
				self.coll_y = 0
			else
				animate(self, false)
			end
		end
	else
		if vmath.length(self.vel) > 0 then
			animate(self, false)
			if self.vel.y == 1 then
				self.wk = self.wk + 1
			elseif self.vel.x == 1 then
				self.wk = self.wk + 1
			elseif self.vel.y == -1 then
				self.wk = self.wk + 1
			elseif self.vel.x == -1 then
				self.wk = self.wk + 1
			end
		end
		self.vel = vmath.vector3()
		self.wk = 0
	end
end

function update(self, dt)
	self.pos = go.get_position()
	move(self)
	self.stpd = self.wk == 0
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.group == hash("blocker") then
			if message.normal.x ~= 0 and self.stpd then
				self.coll_x = message.normal.x
			elseif message.normal.y ~= 0 and self.stpd then
				self.coll_y = message.normal.y
			end
		end
	end
	if message_id == hash("hold") then
		self.hold = message.state
	end
	if message_id == hash("rq_main") then
		msg.post(message.dest, message.msgid, message.table)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("fwd") or action_id == hash("right") or action_id == hash("back") or action_id == hash("left") then
		if not self.hold then
			if action_id == hash("fwd") and self.stpd then
				self.vel = self.ymove
			end
			if action_id == hash("right") and self.stpd then
				self.vel = self.xmove
			end
			if action_id == hash("back") and self.stpd then
				self.vel = -self.ymove
			end
			if action_id == hash("left") and self.stpd then
				self.vel = -self.xmove
			end
		end
	end
	if action_id == hash("btn_1") then
	end
end